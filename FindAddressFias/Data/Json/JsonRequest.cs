using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace FindAddressFias.Data
{
    // <auto-generated />
    //
    // To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
    //
    //    using QuickType;
    //
    //    var welcome = Welcome.FromJson(jsonString);
    public partial class JsonRequest
    {
        [JsonProperty("Division")]
        public string Division { get; set; }

        [JsonProperty("MunHierarchy.Region")]
        public string MunHierarchyRegion { get; set; }

        [JsonProperty("MunHierarchy.Settlement")]
        public string MunHierarchySettlement { get; set; }

        [JsonProperty("MunHierarchy.IntownTerritory")]
        public string MunHierarchyIntownTerritory { get; set; }

        [JsonProperty("MunHierarchy.PlanningStructure")]
        public string MunHierarchyPlanningStructure { get; set; }

        [JsonProperty("MunHierarchy.Street")]
        public string MunHierarchyStreet { get; set; }

        [JsonProperty("MunHierarchy.Stead")]
        public string MunHierarchyStead { get; set; }

        [JsonProperty("MunHierarchy.House")]
        public string MunHierarchyHouse { get; set; }

        [JsonProperty("MunHierarchy.CarPlace")]
        public string MunHierarchyCarPlace { get; set; }

        [JsonProperty("MunHierarchy.Apartment")]
        public string MunHierarchyApartment { get; set; }

        [JsonProperty("MunHierarchy.Room")]
        public string MunHierarchyRoom { get; set; }

        [JsonProperty("PostalIndex")]
        public string PostalIndex { get; set; }

        [JsonProperty("OkatoCode")]
        public string OkatoCode { get; set; }

        [JsonProperty("OkatoComboBox")]
        public string OkatoComboBox { get; set; }

        [JsonProperty("Section")]
        public string Section { get; set; }

        [JsonProperty("OktmoCode")]
        public string OktmoCode { get; set; }

        //[JsonProperty("OktmoComboBox_input")]
        //public string OktmoComboBoxInput { get; set; }

        [JsonProperty("OktmoComboBox")]
        public string OktmoComboBox { get; set; }

        [JsonProperty("GUID")]
        public string Guid { get; set; }

        [JsonProperty("CadastrNumber")]
        public string CadastrNumber { get; set; }

        [JsonProperty("OnlyActualAddressObjects")]
        public string OnlyActualAddressObjects { get; set; }

        [JsonProperty("ObjectLevelFias")]
        public string ObjectLevelFias { get; set; }

        [JsonProperty("MunHierarchy")]
        public string MunHierarchy { get; set; }

        [JsonProperty("AdmHierarchy")]
        public string AdmHierarchy { get; set; }

        [JsonProperty("skip")]
        public long Skip { get; set; }

        [JsonProperty("take")]
        public long Take { get; set; }
    }

    public partial class Welcome
    {
        public static Welcome FromJson(string json) => JsonConvert.DeserializeObject<Welcome>(json, Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Welcome self) => JsonConvert.SerializeObject(self, Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class PurpleParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly PurpleParseStringConverter Singleton = new PurpleParseStringConverter();
    }

    internal class FluffyParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(bool) || t == typeof(bool?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            bool b;
            if (Boolean.TryParse(value, out b))
            {
                return b;
            }
            throw new Exception("Cannot unmarshal type bool");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (bool)untypedValue;
            var boolString = value ? "true" : "false";
            serializer.Serialize(writer, boolString);
            return;
        }

        public static readonly FluffyParseStringConverter Singleton = new FluffyParseStringConverter();
    }
}